(page "index.html"
  (:require [cljsjs.c3]
            [clojure.string :as str]))

(def default-overhead 5)
(def overhead (cell [:value default-overhead]))
(def default-runtime 60)
(def runtime (cell [:value default-runtime]))
(def default-max-threads 16)
(def max-threads (cell [:value default-max-threads]))

(def route (route-cell))
(def params (cell= (map js/parseFloat (str/split (subs (if (= nil route) (str "#" default-max-threads "/" default-overhead "/" default-runtime) route) 1) #"/"))))

(def param-inputs [max-threads overhead runtime])
(def param-updates (cell= (run! #(reset! (get %1 0) [:value (get %1 1)]) (map vector param-inputs params))))
(def url-updates (cell= (set! (.-hash (.-location js/document)) (str "#" (get max-threads 1) "/" (get overhead 1) "/" (get runtime 1)))))

(defelem number-input [{:keys [to name]} children]
  (defn from-string [value] (js/parseFloat value))
  (defn validity [value] (not (js/isNaN (from-string value))))
  (defn update-to! [value] (reset! to value))
  (let [val (cell (get @to 1))
        update-to! (fn [value] (reset! to value))
        update-val! (fn [value] (reset! val value))
        valid (cell= (validity val))
        _ (cell= (update-val! (get to 1)))
        _ (cell= (update-to! (if valid [:value val] [:error "Value is invalid"])))]
    (div :class "field"
      (div :class (cell= {:input true :invalid (not valid)})
        (label name)
        (input
          :value val
          :input #(reset! val @%)
          :click #(this-as field (.select (js/jQuery field)))))
      children)))

(defelem graph [{:keys [data axis point size]} _]
  (let [elem (div :class "graph")
        _ (with-timeout 1000 (let [chart (.generate js/c3 (clj->js {:bindto elem
                                                                    :data @data
                                                                    :axis axis
                                                                    :point point
                                                                    :size size}))
                                   _ (cell= (let [_ (.load chart (clj->js data))
                                                  _ (.flush chart)]))]))]
    elem))

(defn calc-efficiency [overhead runtime x]
  ((fn [x] (+ (* overhead x) (/ runtime x)))
   (if (= x 0) 0.1 x)))
(defn calc-runtime [overhead runtime x]
  ((fn [x] (+ overhead (/ runtime x)))
   (if (= x 0) 0.1 x)))

(def xs (cell= (let [_ (print max-threads) _ (print (inc max-threads))] (range 1 (inc max-threads)))))
(def graph-data (cell= {:type "spline" :x "x" :columns [(conj xs "x")
                                                        (conj (map (partial calc-efficiency (get overhead 1) (get runtime 1)) xs) "Efficiency")
                                                        (conj (map (partial calc-runtime (get overhead 1) (get runtime 1)) xs) "Wall clock runtime")]}))

(html
  (head
    (title "Parallelism calculator")
    (html-meta :charset "utf-8")
    (link :href "normalize.css" :rel "stylesheet")
    (link :href "c3.css" :rel "stylesheet")
    (link :href "app.css" :rel "stylesheet")
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"))
  (body
    (div :class "sidebar"
      (number-input :to overhead    :name "Overhead:"
        (p :class "description" "This is the overhead for starting a single parallel thread."))
      (number-input :to runtime     :name "Runtime:"
        (p :class "description" "This is the total runtime for the work you have to do."))
      (number-input :to max-threads :name "Max Threads:"
        (p :class "description" "The maximum number of threads in your algorithm.")))
    (div :class "graph-wrapper"
      (graph :data graph-data
             :axis {:x {:tick {:culling {:max "off"}}}
                    :y {:min 0}}))))
