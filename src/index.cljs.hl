(page "index.html"
  (:require [cljsjs.c3]))

(defelem number-input [{:keys [to name description]} _]
  (defn from-string [value] (js/parseFloat value))
  (defn validity [value] (not (js/isNaN (from-string value))))
  (let [val (cell @to)
        valid (cell= (validity val))]
    (add-watch val :input #(let [newVal %4
                                 i (from-string newVal)
                                 valid (validity newVal)]
                              (reset! to (if valid i 0))))
    (div :class "field"
      (div :class (cell= (if valid {:input true :invalid false} {:input true :invalid true}))
        (label name)
        (input
          :value val
          :input #(reset! val @%)
          :click #(this-as field (.select (js/jQuery field)))))
      (if description (p :class "description" description)))))

(defelem graph [{:keys [data axis point size]} _]
  (let [elem (div :class "graph")
        _ (with-timeout 100 (let [chart (.generate js/c3 (clj->js {:bindto elem
                                                                   :data @data
                                                                   :axis axis
                                                                   :point point
                                                                   :size size}))
                                  _ (cell= (let [_ (.load chart (clj->js data))
                                                 _ (.flush chart)]))]))]
    elem))

(defn calc-efficiency [overhead runtime x]
  ((fn [x] (+ (* overhead x) (/ runtime x)))
   (if (= x 0) 0.8 x)))
(defn calc-runtime [overhead runtime x]
  ((fn [x] (+ overhead (/ runtime x)))
   (if (= x 0) 0.8 x)))

(def overhead (cell 5))
(def runtime (cell 60))
(def max-threads (cell 16))
(def xs (cell= (range 1 max-threads)))
(def graph-data (cell= {:type "spline" :x "x" :columns [(conj xs "x")
                                                        (conj (map (partial calc-efficiency overhead runtime) xs) "Efficiency")
                                                        (conj (map (partial calc-runtime overhead runtime) xs) "Wall clock runtime")]}))
(html
  (head
    (html-meta :charset "utf-8")
    (link :href "normalize.css" :rel "stylesheet")
    (link :href "c3.css" :rel "stylesheet")
    (link :href "app.css" :rel "stylesheet")
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"))
  (body
    (div :class "sidebar"
      (number-input :to overhead    :name "Overhead:"    :description "This is the overhead for starting a single parallel thread.")
      (number-input :to runtime     :name "Runtime:"     :description "This is the total runtime for the work you have to do.")
      (number-input :to max-threads :name "Max Threads:" :description "The maximum number of threads in your algorithm."))
    (div :class "graph-wrapper"
      (graph :data graph-data :axis {:x {:tick {:culling {:max "off"}}}
                                     :y {:min 0}}))))
